import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
import logging
from database import Database
from config import config
import asyncio
from check_bot import SubscriptionChecker

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(—É—Ä–æ–≤–µ–Ω—å)s - %(—Å–æ–æ–±—â–µ–Ω–∏–µ)s'
)
logger = logging.getLogger(__name__)

db = Database()
subscription_checker = SubscriptionChecker()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class States:
    WAITING_SCREENSHOT = "waiting_screenshot"
    NORMAL = "normal"
    ADMIN = "admin"
    WAITING_TASK_DESCRIPTION = "waiting_task_description"
    WAITING_TASK_REWARD = "waiting_task_reward"
    WAITING_CHANNEL_LINK = "waiting_channel_link"
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    EDIT_DESCRIPTION = "edit_description"
    EDIT_REWARD = "edit_reward"
    EDIT_LINK = "edit_link"
    EDIT_POSITION = "edit_position"

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup([
        ["‚úÖ –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è ‚úÖ"],
        [f"–ë–∞–ª–∞–Ω—Å: 0 ‚ÇΩ", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
    ], resize_keyboard=True)
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
async def get_main_keyboard_with_balance(user_id: int):
    balance = await db.get_balance(user_id)
    keyboard = ReplyKeyboardMarkup([
        ["‚úÖ –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è ‚úÖ"],
        [f"–ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"]
    ], resize_keyboard=True)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(f"Admin IDs: {config['admin_ids']}")
        logger.info(f"Current user ID: {user_id}")
        logger.info(f"Is admin check: {user_id in config['admin_ids']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ
        if user_id in config['admin_ids']:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é")
            await show_admin_menu(update, context)
            return
        else:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é")

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(config["understand_button"], callback_data="understand")]
        ])
        
        await update.message.reply_text(
            text=config["welcome_message"],
            reply_markup=keyboard
        )
        context.user_data['state'] = States.NORMAL
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user_id = query.from_user.id
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        await query.answer()
        await query.message.delete()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        keyboard = await get_main_keyboard_with_balance(user_id)
        
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_click: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è"
async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        tasks = await db.get_available_tasks(user_id)
        
        if not tasks:
            await update.message.reply_text(
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π üòî\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ!"
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['available_tasks'] = tasks
        context.user_data['task_index'] = 0

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        task = tasks[0]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Å—ã–ª–æ–∫
        if task['type'] == 'subscribe':
            channel_link = task['extra_data'].get('channel_link', '')
            if not channel_link.startswith('https://'):
                channel_link = f"https://t.me/{channel_link.lstrip('@')}"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üëâ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_link)],
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"check_sub_{task['id']}")],
                [InlineKeyboardButton("‚è© –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="next_task")]
            ])
            
            message_text = (
                f"üìã –ó–∞–¥–∞–Ω–∏–µ #{task['id']}\n\n"
                f"–¢–∏–ø: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª\n"
                f"üíé –ù–∞–≥—Ä–∞–¥–∞: {task['reward']} ‚ÇΩ\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{task['description']}\n\n"
                f"‚úÖ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:\n"
                f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ\n"
                f"2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n"
                f"3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏"
            )
            
        elif task['type'] == 'register':
            reg_link = task['extra_data'].get('reg_link', '')
            if not reg_link.startswith(('http://', 'https://')):
                reg_link = f"https://{reg_link}"
                
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üëâ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", url=reg_link)],
                [InlineKeyboardButton("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", callback_data=f"send_screenshot_{task['id']}")]
            ])
            
            message_text = (
                f"üìã –ó–∞–¥–∞–Ω–∏–µ #{task['id']}\n\n"
                f"–¢–∏–ø: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ\n"
                f"üíé –ù–∞–≥—Ä–∞–¥–∞: {task['reward']} ‚ÇΩ\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{task['description']}\n\n"
                f"‚úÖ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:\n"
                f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ\n"
                f"2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ\n"
                f"3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç"
            )

        await update.message.reply_text(
            text=message_text,
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_tasks: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {config['support_link']}")

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.callback_query:
            message = update.callback_query.message
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="add_task")],
                [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="list_tasks")],
                [InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è", callback_data="edit_tasks")],
                [InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast")],
                [InlineKeyboardButton("üë§ –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="user_mode")]
            ])
            
            await message.edit_text(
                "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
        else:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="add_task")],
                [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="list_tasks")],
                [InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast")],
                [InlineKeyboardButton("üë§ –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="user_mode")]
            ])
            
            await update.message.reply_text(
                "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
        
        context.user_data['state'] = States.ADMIN
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_menu: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
async def add_task_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="new_task_subscribe")],
            [InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ", callback_data="new_task_register")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ])
        
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
        await query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_task_start: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
async def handle_admin_task_response(update: Update, context: ContextTypes.DEFAULT_TYPE, approve: bool):
    try:
        query = update.callback_query
        data = query.data.split('_')
        user_id = int(data[1])
        task_id = int(data[2])
        
        if approve:
            reward = await db.get_task_reward(task_id)
            await db.update_balance(user_id, reward)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
            new_keyboard = await get_main_keyboard_with_balance(user_id)
            await context.bot.send_message(
                user_id, 
                "‚úÖ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ! –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω", 
                reply_markup=new_keyboard
            )
        else:
            await context.bot.send_message(user_id, "‚ùå –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            
        await query.answer()
        await query.message.delete()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_task_response: {e}", exc_info=True)

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        task_id = int(query.data.split('_')[2])
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        task = await db.get_task_by_id(task_id)
        if not task:
            await query.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
        channel_link = task['extra_data'].get('channel_link', '')
        channel_username = channel_link.split('/')[-1].replace('@', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞
        is_subscribed = await subscription_checker.check_subscription(channel_username, user_id)
        
        if (is_subscribed):
            # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
            reward = task['reward']
            await db.update_balance(user_id, reward)
            
            # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
            await db.mark_task_completed(user_id, task_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
            new_keyboard = await get_main_keyboard_with_balance(user_id)
            
            await query.message.edit_text(
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                f"üíé –ü–æ–ª—É—á–µ–Ω–æ: {reward} ‚ÇΩ\n"
                "–ù–∞–∂–º–∏—Ç–µ '–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await context.bot.send_message(
                user_id,
                "üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=new_keyboard
            )
        else:
            await query.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_subscription: {e}", exc_info=True)
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

async def handle_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if context.user_data.get('state') != States.WAITING_SCREENSHOT:
            return

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("screenshots", exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        task_id = context.user_data.get('current_task_id')
        file_path = f"screenshots/{user_id}_{task_id}.jpg"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º download_to_drive –≤–º–µ—Å—Ç–æ download
        await file.download_to_drive(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await db.save_screenshot(user_id, task_id, file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∞–º
        for admin_id in config['admin_ids']:
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{user_id}_{task_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}_{task_id}")
                ]
            ])
            
            with open(file_path, 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=admin_id,
                    photo=photo,
                    caption=f"üìù –ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n–ó–∞–¥–∞–Ω–∏–µ #{task_id}\n–ù–∞–≥—Ä–∞–¥–∞: {context.user_data['current_task_reward']} ‚ÇΩ",
                    reply_markup=keyboard
                )

        await update.message.reply_text("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        context.user_data['state'] = States.NORMAL

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_screenshot: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")

# –ó–º—ñ–Ω—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é start_broadcast
async def start_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ])
        
        await query.message.edit_text(
            "üì¢ –†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n\n"
            "‚ùóÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞",
            reply_markup=keyboard
        )
        
        context.user_data['state'] = 'waiting_broadcast'
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_broadcast: {e}", exc_info=True)

# –ó–º—ñ–Ω—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é handle_broadcast_message
async def handle_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if context.user_data.get('state') != 'waiting_broadcast':
            return

        message = update.message
        users = await db.get_all_users()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏
        total_users = len(users)
        success = 0
        failed = 0
        failed_users = []  # –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫–∏–º –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
        
        # –ü—Ä–æ–≥—Ä–µ—Å —Ä–æ–∑—Å–∏–ª–∫–∏
        progress_msg = await message.reply_text(
            "üì§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            "–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n"
            "–û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: 0"
        )

        for i, user_id in enumerate(users, 1):
            try:
                if message.photo:
                    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º
                    await context.bot.send_photo(
                        chat_id=user_id,
                        photo=message.photo[-1].file_id,
                        caption=message.caption,
                        parse_mode='HTML'
                    )
                elif message.video:
                    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–µ–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º
                    await context.bot.send_video(
                        chat_id=user_id,
                        video=message.video.file_id,
                        caption=message.caption,
                        parse_mode='HTML'
                    )
                else:
                    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=message.text,
                        parse_mode='HTML'
                    )
                success += 1
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                if i % 10 == 0:
                    await progress_msg.edit_text(
                        "üì§ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
                        f"–û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {failed}"
                    )
                
                # –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –æ–±–º–µ–∂–µ–Ω—å API
                await asyncio.sleep(0.05)
                
            except Exception as e:
                failed += 1
                failed_users.append(user_id)
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
        success_rate = (success / total_users) * 100 if total_users > 0 else 0
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        result_text = (
            "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {failed}\n"
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%\n\n"
        )

        # –î–æ–¥–∞—î–º–æ —Ä—ñ–∑–Ω—ñ –µ–º–æ–¥–∑—ñ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ
        if success_rate == 100:
            result_text = "üöÄ " + result_text + "–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–¥–µ–∞–ª—å–Ω–æ!"
        elif success_rate >= 90:
            result_text = "‚ú® " + result_text + "–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–µ–Ω—å —É—Å–ø–µ—à–Ω–æ!"
        elif success_rate >= 75:
            result_text = "üëç " + result_text + "–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ö–æ—Ä–æ—à–æ."
        elif success_rate >= 50:
            result_text = "‚ö†Ô∏è " + result_text + "–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ."
        else:
            result_text = "‚ùå " + result_text + "–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π."

        # –Ø–∫—â–æ —î –Ω–µ–≤–¥–∞–ª—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏, –¥–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∏—Ö
        if failed_users:
            result_text += "\n‚ö†Ô∏è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—à–∏–±–∫–∞–º–∏:\n"
            result_text += ", ".join(map(str, failed_users[:10]))
            if len(failed_users) > 10:
                result_text += f"\n–∏ –µ—â–µ {len(failed_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."

        # –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–º –∑–≤—ñ—Ç–æ–º
        await progress_msg.edit_text(result_text)

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ –∞–¥–º—ñ–Ω-–º–µ–Ω—é
        context.user_data['state'] = States.ADMIN
        await show_admin_menu(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_broadcast_message: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        )

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
async def cancel_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        context.user_data['state'] = States.ADMIN
        await show_admin_menu(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_broadcast: {e}", exc_info=True)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
async def handle_new_task_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        task_type = query.data.split('_')[2]
        
        context.user_data['new_task_type'] = task_type
        context.user_data['state'] = States.WAITING_TASK_DESCRIPTION
        
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
        await query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_new_task_type: {e}", exc_info=True)

async def handle_task_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != States.WAITING_TASK_DESCRIPTION:
        return
        
    context.user_data['new_task_description'] = update.message.text
    context.user_data['state'] = States.WAITING_TASK_REWARD
    
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ (–≤ —Ä—É–±–ª—è—Ö):")

async def handle_task_reward(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != States.WAITING_TASK_REWARD:
        return
        
    try:
        reward = float(update.message.text)
        context.user_data['new_task_reward'] = reward
        
        if context.user_data['new_task_type'] == 'subscribe':
            context.user_data['state'] = States.WAITING_CHANNEL_LINK
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:")
        else:
            context.user_data['state'] = States.WAITING_CHANNEL_LINK
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
            
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        tasks = await db.get_all_tasks()  # –î–æ–±–∞–≤–∏–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ database.py
        
        if not tasks:
            await query.message.edit_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç")
            return
            
        text = "üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:\n\n"
        for task in tasks:
            text += f"#{task['id']} - {task['description']}\n"
            text += f"–¢–∏–ø: {task['type']}\n"
            text += f"–ù–∞–≥—Ä–∞–¥–∞: {task['reward']} ‚ÇΩ\n\n"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ])
        
        await query.message.edit_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_tasks: {e}", exc_info=True)

async def handle_channel_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') != States.WAITING_CHANNEL_LINK:
        return
        
    try:
        link = update.message.text
        task_type = context.user_data['new_task_type']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª
        if task_type == 'subscribe':
            link = format_channel_link(link)
                
        task_data = {
            'type': task_type,
            'description': context.user_data['new_task_description'],
            'reward': float(context.user_data['new_task_reward']),
            'extra_data': {
                'channel_link' if task_type == 'subscribe' else 'reg_link': link
            }
        }
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏: {task_data}")
        task_id = await db.add_task(**task_data)
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n"
            f"ID: {task_id}\n"
            f"–¢–∏–ø: {task_data['type']}\n"
            f"–ù–∞–≥—Ä–∞–¥–∞: {task_data['reward']} ‚ÇΩ"
        )
        
        context.user_data['state'] = States.ADMIN
        await show_admin_menu(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_channel_link: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è")

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é:
async def next_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        tasks = context.user_data.get('available_tasks', [])
        current_index = context.user_data.get('task_index', 0)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
        next_index = (current_index + 1) % len(tasks)
        task = tasks[next_index]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
        context.user_data['task_index'] = next_index
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–∫ –≤ show_tasks
        if task['type'] == 'subscribe':
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üëâ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=task['extra_data']['channel_link'])],
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"check_sub_{task['id']}")],
                [InlineKeyboardButton("‚è© –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="next_task")]
            ])
            
            message_text = (
                f"üìã –ó–∞–¥–∞–Ω–∏–µ #{task['id']}\n\n"
                f"–¢–∏–ø: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª\n"
                f"üíé –ù–∞–≥—Ä–∞–¥–∞: {task['reward']} ‚ÇΩ\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{task['description']}\n\n"
                f"‚úÖ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:\n"
                f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ\n"
                f"2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª\n"
                f"3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏"
            )
        else:
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è register
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üëâ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", url=task['extra_data']['reg_link'])],
                [InlineKeyboardButton("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", callback_data=f"send_screenshot_{task['id']}")],
                [InlineKeyboardButton("‚è© –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="next_task")]
            ])
            
            message_text = (
                f"üìã –ó–∞–¥–∞–Ω–∏–µ #{task['id']}\n\n"
                f"–¢–∏–ø: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ\n"
                f"üíé –ù–∞–≥—Ä–∞–¥–∞: {task['reward']} ‚ÇΩ\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\–Ω{task['description']}\n\n"
                f"‚úÖ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:\–Ω"
                f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ\n"
                f"2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ\n"
                f"3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç"
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.edit_text(
            text=message_text,
            reply_markup=keyboard
        )
        await query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ next_task: {e}", exc_info=True)

def format_channel_link(link: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    if not link:
        return ''
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    link = link.strip()
    
    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞
    if link.startswith(('https://', 'http://')):
        return link
        
    # –ï—Å–ª–∏ —ç—Ç–æ —é–∑–µ—Ä–Ω–µ–π–º —Å @ –∏–ª–∏ –±–µ–∑
    username = link.lstrip('@')
    return f"https://t.me/{username}"

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π run_bot()
async def handle_send_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º id –∑–∞–¥–∞–Ω–∏—è –∏–∑ callback_data
        task_id = int(query.data.split('_')[2])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –∑–∞–¥–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['current_task_id'] = task_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
        task = await db.get_task_by_id(task_id)
        if task:
            context.user_data['current_task_reward'] = task['reward']
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        context.user_data['state'] = States.WAITING_SCREENSHOT
        await query.message.edit_text(
            "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.\n\n"
            "‚ùóÔ∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –≤–∏–¥–Ω–æ:\–Ω"
            "- –î–∞—Ç—É –∏ –≤—Ä–µ–º—è\n"
            "- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_send_screenshot: {e}", exc_info=True)
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

# –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é main() –Ω–∞:

def run_bot():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(os.getenv('BOT_TOKEN')).build()
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler('start', start))
    
    # Callback handlers
    application.add_handler(CallbackQueryHandler(button_click, pattern='^understand$'))
    application.add_handler(CallbackQueryHandler(add_task_start, pattern="^add_task$"))
    application.add_handler(CallbackQueryHandler(handle_new_task_type, pattern="^new_task_"))  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –µ—Å—Ç—å
    application.add_handler(CallbackQueryHandler(list_tasks, pattern="^list_tasks$"))
    application.add_handler(CallbackQueryHandler(show_admin_menu, pattern="^back_to_admin$"))
    application.add_handler(CallbackQueryHandler(start_broadcast, pattern="^broadcast$"))
    application.add_handler(CallbackQueryHandler(switch_to_user_mode, pattern="^user_mode$"))
    application.add_handler(CallbackQueryHandler(
        lambda u, c: handle_admin_task_response(u, c, True), 
        pattern="^approve_"
    ))
    application.add_handler(CallbackQueryHandler(
        lambda u, c: handle_admin_task_response(u, c, False), 
        pattern="^reject_"
    ))
    application.add_handler(CallbackQueryHandler(check_subscription, pattern="^check_sub_"))
    application.add_handler(CallbackQueryHandler(next_task, pattern="^next_task$"))
    application.add_handler(CallbackQueryHandler(handle_send_screenshot, pattern="^send_screenshot_"))
    application.add_handler(CallbackQueryHandler(cancel_broadcast, pattern="^cancel_broadcast$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    application.add_handler(MessageHandler(
        filters.Text(["üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]) & filters.User(config['admin_ids']),
        admin_button_handler
    ))

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.Text(["‚úÖ –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è ‚úÖ"]), 
        show_tasks
    ))
    application.add_handler(MessageHandler(
        filters.Text(["–ü–æ–¥–¥–µ—Ä–∂–∫–∞"]), 
        support
    ))
    application.add_handler(MessageHandler(filters.PHOTO, handle_screenshot))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∞
    application.add_handler(MessageHandler(
        filters.TEXT & filters.User(config['admin_ids']),
        handle_admin_input
    ))
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
    application.add_handler(CallbackQueryHandler(
        cancel_broadcast, 
        pattern="^cancel_broadcast$"
    ))
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
    application.add_handler(CallbackQueryHandler(edit_task_menu, pattern="^edit_tasks$"))
    application.add_handler(CallbackQueryHandler(show_task_edit_options, pattern="^edit_task_"))
    application.add_handler(CallbackQueryHandler(handle_delete_task, pattern="^delete_task_"))
    application.add_handler(CallbackQueryHandler(confirm_delete_task, pattern="^confirm_delete_"))
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å—Ç–∞–Ω—ñ–≤ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    application.add_handler(CallbackQueryHandler(
        lambda u, c: set_edit_state(u, c, 'edit_description'), 
        pattern="^edit_desc_"
    ))
    application.add_handler(CallbackQueryHandler(
        lambda u, c: set_edit_state(u, c, 'edit_reward'), 
        pattern="^edit_reward_"
    ))
    application.add_handler(CallbackQueryHandler(
        lambda u, c: set_edit_state(u, c, 'edit_link'), 
        pattern="^edit_link_"
    ))
    application.add_handler(CallbackQueryHandler(
        lambda u, c: set_edit_state(u, c, 'edit_position'), 
        pattern="^edit_position_"
    ))
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    application.add_handler(MessageHandler(
        filters.TEXT & filters.User(config['admin_ids']) & 
        filters.StateFilter('edit_description', 'edit_reward', 'edit_link', 'edit_position'),
        handle_edit_input
    ))
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    application.add_handler(MessageHandler(
        filters.TEXT 
        & filters.User(config['admin_ids']) 
        & (
            filters.create(
                lambda _, ctx: ctx.user_data.get('edit_state') in [
                    'edit_description', 
                    'edit_reward', 
                    'edit_link', 
                    'edit_position'
                ]
            )
        ),
        handle_edit_input
    ))

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    # application.add_handler(MessageHandler(
    #     filters.TEXT 
    #     & filters.User(config['admin_ids']) 
    #     & filters.StateFilter(...),
    #     handle_edit_input
    # ))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω-–≤–≤–æ–¥–∞:
async def handle_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        state = context.user_data.get('state')
        text = update.message.text
        
        if state == States.WAITING_TASK_DESCRIPTION:
            context.user_data['new_task_description'] = text
            context.user_data['state'] = States.WAITING_TASK_REWARD
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ (–≤ —Ä—É–±–ª—è—Ö):")
            logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ")
            
        elif state == States.WAITING_TASK_REWARD:
            try:
                reward = float(text)
                context.user_data['new_task_reward'] = reward
                context.user_data['state'] = States.WAITING_CHANNEL_LINK
                
                if context.user_data.get('new_task_type') == 'subscribe':
                    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:")
                else:
                    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
                logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Å—ã–ª–∫–∞")
                    
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                
        elif state == States.WAITING_CHANNEL_LINK:
            link = text
            task_type = context.user_data.get('new_task_type', '')
            
            task_data = {
                'type': task_type,
                'description': context.user_data.get('new_task_description', ''),
                'reward': float(context.user_data.get('new_task_reward', 0)),
                'extra_data': {
                    'channel_link' if task_type == 'subscribe' else 'reg_link': link
                }
            }
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏: {task_data}")
            task_id = await db.add_task(**task_data)
            
            await update.message.reply_text(
                f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\–Ω"
                f"ID: {task_id}\n"
                f"–¢–∏–ø: {task_data['type']}\n"
                f"–ù–∞–≥—Ä–∞–¥–∞: {task_data['reward']} ‚ÇΩ"
            )
            
            context.user_data['state'] = States.ADMIN
            await show_admin_menu(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_input: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞")

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é:

async def switch_to_user_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance = await db.get_balance(query.from_user.id) or 0
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = ReplyKeyboardMarkup([
            ["‚úÖ –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è ‚úÖ"],
            [f"–ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"],
            ["üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]  # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        ], resize_keyboard=True)
        
        await query.message.delete()
        await query.message.reply_text(
            "üë§ –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
            reply_markup=keyboard
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['state'] = States.NORMAL
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ switch_to_user_mode: {e}", exc_info=True)

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async def admin_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id in config['admin_ids']:
            logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é
            await show_admin_menu(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_button_handler: {e}", exc_info=True)

async def edit_task_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å"""
    try:
        query = update.callback_query
        tasks = await db.get_all_tasks()
        
        if not tasks:
            await query.message.edit_text(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
                ]])
            )
            return
            
        keyboard = []
        for task in tasks:
            keyboard.append([
                InlineKeyboardButton(
                    f"#{task['id']} - {task['description'][:30]}...", 
                    callback_data=f"edit_task_{task['id']}"
                )
            ])
            
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
        
        await query.message.edit_text(
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_task_menu: {e}")

async def show_task_edit_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –æ–ø—Ü—ñ—ó —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
    try:
        query = update.callback_query
        task_id = int(query.data.split('_')[2])
        task = await db.get_task_by_id(task_id)
        
        if not task:
            await query.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
            
        context.user_data['editing_task_id'] = task_id
        
        keyboard = [
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc_{task_id}")],
            [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É", callback_data=f"edit_reward_{task_id}")],
            [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"edit_link_{task_id}")],
            [InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data=f"edit_position_{task_id}")],
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"delete_task_{task_id}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_tasks")]
        ]
        
        message_text = (
            f"üìã –ó–∞–¥–∞–Ω–∏–µ #{task['id']}\n\n"
            f"–¢–∏–ø: {task['type']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {task['description']}\n"
            f"–ù–∞–≥—Ä–∞–¥–∞: {task['reward']} ‚ÇΩ\n"
            f"–°—Å—ã–ª–∫–∞: {task['extra_data'].get('channel_link' if task['type'] == 'subscribe' else 'reg_link', '')}"
        )
        
        await query.message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_task_edit_options: {e}")

async def handle_edit_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"""
    try:
        user_id = update.effective_user.id
        if user_id not in config['admin_ids']:
            return
            
        state = context.user_data.get('edit_state')
        task_id = context.user_data.get('editing_task_id')
        
        if not state or not task_id:
            return
            
        task = await db.get_task_by_id(task_id)
        if not task:
            await update.message.reply_text("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
            
        updates = {}
        
        if state == 'edit_description':
            updates['description'] = update.message.text
        elif state == 'edit_reward':
            try:
                reward = float(update.message.text)
                updates['reward'] = reward
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                return
        elif state == 'edit_link':
            link = update.message.text
            if task['type'] == 'subscribe':
                link = format_channel_link(link)
            updates['extra_data'] = {
                'channel_link' if task['type'] == 'subscribe' else 'reg_link': link
            }
        elif state == 'edit_position':
            try:
                new_position = int(update.message.text)
                if new_position < 1:
                    await update.message.reply_text("–ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                    return
                await db.reorder_task(task_id, new_position)
                await update.message.reply_text("‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞!")
                context.user_data.pop('edit_state', None)
                await show_task_edit_options(update, context)
                return
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
                return
                
        if updates:
            success = await db.update_task(task_id, updates)
            if success:
                await update.message.reply_text("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                
        context.user_data.pop('edit_state', None)
        await show_task_edit_options(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_edit_input: {e}")

async def handle_delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è"""
    try:
        query = update.callback_query
        task_id = int(query.data.split('_')[2])
        
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_delete_{task_id}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"edit_task_{task_id}")
        ]])
        
        await query.message.edit_text(
            "‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ?\–Ω"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_delete_task: {e}")

async def confirm_delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è"""
    try:
        query = update.callback_query
        task_id = int(query.data.split('_')[2])
        
        success = await db.delete_task(task_id)
        if success:
            await query.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
            await edit_task_menu(update, context)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_delete_task: {e}")

async def set_edit_state(update: Update, context: ContextTypes.DEFAULT_TYPE, state: str):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–ø–∏—Ç—É—î –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è"""
    try:
        query = update.callback_query
        task_id = int(query.data.split('_')[2])
        
        context.user_data['edit_state'] = state
        context.user_data['editing_task_id'] = task_id
        
        messages = {
            'edit_description': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:",
            'edit_reward': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É (–≤ —Ä—É–±–ª—è—Ö):",
            'edit_link': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:",
            'edit_position': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (—á–∏—Å–ª–æ):"
        }
        
        await query.message.edit_text(
            messages[state],
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_task_{task_id}")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_edit_state: {e}")
        
if __name__ == '__main__':
    run_bot()
